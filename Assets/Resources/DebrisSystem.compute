#define THREADS 128

//the constants used for calculate cellID of particles AKA hash values
float HashScale;
float2 HashSize;
float2 HashTranslate;
//the indexmap and start/end index buffer
StructuredBuffer<int2> IndexMap;
StructuredBuffer<int2> Table;

int2 HashIndex(float2 p)
{
	p = (p - HashTranslate) * HashScale;
	return clamp(p, 0, HashSize - 1);
}

StructuredBuffer<float2> PositionsREAD;
RWStructuredBuffer<float2> PositionsWRITE;
StructuredBuffer<float2> VelocitiesREAD;
RWStructuredBuffer<float2> VelocitiesWRITE;
RWStructuredBuffer<float2> Lifetimes;
StructuredBuffer<float2> PredictedREAD;
RWStructuredBuffer<float2> PredictedWRITE;
AppendStructuredBuffer<uint> Dead;
ConsumeStructuredBuffer<uint> Pool;
AppendStructuredBuffer<uint> Alive;
StructuredBuffer<uint> Counter;
StructuredBuffer<float4> Uploads;

uint Width;
uint CounterOffset;
float Lifetime;
float DT;
float2 Gravity;
float Damping;

Texture2D<float3> _TerrainDistanceField;
SamplerState sampler_TerrainDistanceField;
float4 _TerrainDistanceFieldScale; // x = 1 / width, y = 1 / height, z = width, w = height
float _TerrainDistanceFieldMultiplier;

#pragma kernel Init
[numthreads(THREADS,1,1)]
void Init(uint id : SV_DispatchThreadID)
{
    if (id >= Width) return;

	PositionsWRITE[id] = float2(0, 0);
    VelocitiesWRITE[id] = float2(0, 0);
    Lifetimes[id] = float2(1, 0);
	Dead.Append(id);
}

#pragma kernel Emit
[numthreads(THREADS,1,1)]
void Emit (uint id : SV_DispatchThreadID)
{
	if (id < Width && id < Counter[CounterOffset]) {
		float4 upload = Uploads[id];
		uint idx = Pool.Consume();
        PositionsWRITE[idx] = upload.xy;
        VelocitiesWRITE[idx] = upload.zw;
        Lifetimes[idx] = float2(0, Lifetime);
	}
}

#pragma kernel PredictPositions
[numthreads(THREADS,1,1)]
void PredictPositions (uint id : SV_DispatchThreadID)
{
    if (id >= Width) return;

    float2 lifetime = Lifetimes[id];
    if (lifetime.x > lifetime.y) return;

    float2 velocity = VelocitiesREAD[id];
    velocity -= velocity * Damping * DT;
    velocity += Gravity * DT;
    PredictedWRITE[id] = PositionsREAD[id] + velocity * DT;
}

#define LOOP_START \
[unroll] \
for (int j = -1; j <= 1; j++) \
{ \
[unroll] \
for (int i = -1; i <= 1; i++) \
{ \

#define LOOP_END \
} } \

float2 normalized(float2 v)
{
    return v / max(length(v), 0.0001);
}

#pragma kernel SolveConstraints
[numthreads(THREADS,1,1)]
void SolveConstraints(uint id : SV_DispatchThreadID)
{
    if (id >= Width) return;

    const float2 lifetime = Lifetimes[id];
    if (lifetime.x > lifetime.y) return;

    float2 predicted = PredictedREAD[id];

    float2 correction = float2(0, 0);
    int2 hashIndex = HashIndex(predicted);
	int2 size = HashSize;

    LOOP_START

    int xi = hashIndex.x + i;
    int yj = hashIndex.y + j;

	if (xi < 0 || xi >= size.x) continue;
	if (yj < 0 || yj >= size.y) continue;

    int hash = xi + yj * size.x;
    int2 bounds = Table[hash];

    for (int idx = bounds.x; idx <= bounds.y; idx++)
	{
		uint n = IndexMap[idx].y;
		if (n == id) continue;

        float2 v = predicted - PredictedREAD[n];
        float d = length(v);
        if (d < 1) {
            correction += 0.5 * (1 - d) / max(0.5, d) * v;
        }
    }

    LOOP_END

    predicted += correction;

    float2 uv = predicted * _TerrainDistanceFieldScale.xy + 0.5;
    float3 td = 2 * _TerrainDistanceField.SampleLevel(sampler_TerrainDistanceField, uv, 0) - 1;
    float distance = td.x * _TerrainDistanceFieldMultiplier;
    if (distance < 0.5) {
        const float2 n = normalized(td.yz);
        float2 dp = predicted - PositionsREAD[id];
        float2 dp_n = dot(dp, n) * n;
        float2 dp_t = dp - dp_n;
        float dp_t_length = length(dp_t);
        float b = 1 - max((dp_t_length - 0.6 * length(dp_n)) / dp_t_length, 0);
        predicted += (0.5 - distance) * n - b * dp_t;
    }
    PredictedWRITE[id] = predicted;
}

#pragma kernel Update
[numthreads(THREADS,1,1)]
void Update(uint id : SV_DispatchThreadID)
{
    if (id >= Width) return;

    float2 lifetime = Lifetimes[id];
    if (lifetime.x > lifetime.y) return;

    lifetime.x += DT;
    Lifetimes[id] = lifetime;
    if (lifetime.x > lifetime.y) {
        Dead.Append(id);
    } else {
        Alive.Append(id);
        float2 predictedPosition = PredictedREAD[id];
        float2 velocity = (predictedPosition - PositionsWRITE[id]) / DT;
        float speed = length(velocity);
        float maxSpeed = 0.7 / DT;
        if (speed > maxSpeed) {
            velocity *= maxSpeed / speed;
        }
        VelocitiesWRITE[id] = velocity;
        PositionsWRITE[id] = predictedPosition; 
    }
}