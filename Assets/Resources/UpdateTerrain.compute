#define THREADS 128

RWTexture2D<float4> terrain;
StructuredBuffer<float4> explosions;
AppendStructuredBuffer<float4> emitDebris;
StructuredBuffer<float2> Positions;
StructuredBuffer<uint> Counter;

uint _Count;
uint Width;
uint Height;
uint CounterOffset;

#pragma kernel DestroyTerrain
[numthreads(8,8,1)]
void DestroyTerrain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= Width || id.y >= Height)
        return;

    const float2 pos = id.xy - float2(Width / 2, Height / 2) + 0.5;

    for (uint i = 0; i < _Count; i++) {
        float4 e = explosions[i];
        float2 v = pos - e.xy;
        float r2 = dot(v, v);
        if (r2 < e.z) {
            if (terrain[id.xy].x > 0) {
                terrain[id.xy] = float4(0, 0, 0, 0);
                emitDebris.Append(float4(pos, 1000 / e.z * v));
            }
        }
    }
}

#pragma kernel AddTerrainIndirect
[numthreads(THREADS,1,1)]
void AddTerrainIndirect (uint id : SV_DispatchThreadID)
{
    if (id >= Counter[CounterOffset])
        return;

    float2 position = Positions[id];
    uint2 index = clamp(floor(position + float2(Width / 2, Height / 2)), 0, int2(Width, Height));
    terrain[index] = float4(1, 1, 1, 1);
}